<?php
	#
	# $Id: commit.php,v 1.5 2013-04-08 12:15:34 dan Exp $
	#
	# Copyright (c) 1998-2006 DVL Software Limited
	#


// base class for a single commit
class Commit {

	var $dbh;

	var $commit_log_id;
	var $commit_date_raw;
	var $encoding_losses;
	var $message_id;
	var $committer;
	var $commit_description;
	var $commit_date;
	var $commit_time;
	var $port_id;
	var $category;
	var $category_id;
	var $port;
	var $version;
	var $revision_name;
	var $epoch;
	var $status;
	var $needs_refresh;
	var $forbidden;
	var $broken;
	var $deprecated;
	var $expiration_date;
	var $ignore;
	var $date_added;
	var $element_id;
	var $short_description;
	var $onwatchlist;
	var $stf_message;
	var $svn_revision;

	var $last_modified;
	
	var $LocalResult;

	function Commit($dbh) {
		$this->dbh	= $dbh;
	}

	function PopulateValues($myrow) {
		$this->commit_log_id		= $myrow["commit_log_id"];
		$this->commit_date_raw		= $myrow["commit_date_raw"];
		$this->encoding_losses		= $myrow["encoding_losses"];
		$this->message_id		= $myrow["message_id"];
		$this->committer		= $myrow["committer"];
		$this->commit_description	= $myrow["commit_description"];
		$this->commit_date		= $myrow["commit_date"];
		$this->commit_time		= $myrow["commit_time"];
		$this->port_id			= $myrow["port_id"];
		$this->category			= $myrow["category"];
		$this->category_id		= $myrow["category_id"];
		$this->port			= $myrow["port"];
		$this->version			= $myrow["version"];
		$this->revision_name		= $myrow["revision_name"];
		$this->epoch			= $myrow["epoch"];
		$this->status			= $myrow["status"];
		$this->needs_refresh		= $myrow["needs_refresh"];
		$this->forbidden		= $myrow["forbidden"];
		$this->broken			= $myrow["broken"];
		$this->deprecated		= $myrow["deprecated"];
		$this->expiration_date		= $myrow["expiration_date"];
		$this->ignore			= $myrow["ignore"];
		$this->date_added		= $myrow["date_added"];
		$this->element_id		= $myrow["element_id"];
		$this->short_description	= $myrow["short_description"];
		$this->onwatchlist		= $myrow["onwatchlist"];
		$this->stf_message		= $myrow["stf_message"];
		$this->svn_revision             = $myrow["svn_revision"];
		$this->svn_hostname             = $myrow["svn_hostname"];
		$this->path_to_repo             = $myrow["path_to_repo"];

		$this->last_modified		= $myrow["last_modified"];
	}

	function FetchNth($N) {
		#
		# call FetchByCategoryInitialise first.
		# then call this function N times, where N is the number
		# returned by FetchByCategoryInitialise
		#

		$myrow = pg_fetch_assoc($this->LocalResult, $N);
		$this->PopulateValues($myrow);
	}


	function FetchByMessageId($message_id) {
	        $Debug = 0;
		$Where = "message_id = '" . pg_escape_string($message_id) . "'";

		$result = $this->FetchByIDHelper($Where);
		
		if ($result) {
			$numrows = pg_numrows($result);
			if ($numrows == 1) {
				if ($Debug) echo "fetched by ID succeeded<BR>";
				$myrow = pg_fetch_array ($result, 0);
				$this->PopulateValues($myrow);
			}
		}
		if ($Debug) echo 'message_id is ' . $this->message_id;
		return $this->message_id;
	}

	function FetchByRevision($revision) {
		$Where = "svn_revision = '" . pg_escape_string($revision) . "'";

		$result = $this->FetchByIDHelper($Where);
		
		if ($result) {
			$numrows = pg_numrows($result);
			switch($numrows)
			{
                          case 0:
                                break;
                                
                          default:
                                // assume one or more rows
                                // more thane one email generated by that revision
                                // store this result for late iteration
                                $this->LocalResult = $result;
                                $message_ids = array();
                		for ($i = 0; $i < $numrows; $i++) {
                			$myrow = pg_fetch_array($result, $i);
                			$message_ids[] = $myrow['message_id'];
                                }
                                return $message_ids;
                                break;
                        }
                                
                                
		}
		if ($Debug) echo 'message_id is ' . $this->message_id;

		return $this->message_id;
	}

	function FetchByIDHelper($Where) {
		$Debug = 0;

		$sql = "
SELECT CL.id as commit_log_id,
       message_id,
       message_date,
       to_char(commit_date - SystemTimeAdjust(), 'DD Mon YYYY')  as commit_date,
       to_char(commit_date - SystemTimeAdjust(), 'HH24:MI:SS')   as commit_time,
       message_subject,
       date_added,
       committer,
       CL.description AS commit_description,
       system_id,
       svn_revision,
       R.svn_hostname,
       R.path_to_repo,
       encoding_losses,
       GMT_Format(date_added) as last_modified,
       STF.message as stf_message
  FROM commit_log CL LEFT OUTER JOIN sanity_test_failures STF
    ON CL.id = STF.commit_log_id
    LEFT OUTER JOIN repo R ON CL.repo_id = R.id
 WHERE " . $Where;


    if ($Debug) echo "sql = '<pre>$sql</pre>'<BR>";

		$result = pg_exec($this->dbh, $sql);
		return $result;
	}

	function DateNewestPort() {
		$Debug = 0;

		$sql = "
SELECT GMT_Format(date_added) as last_modified
  FROM ports
 WHERE date_added is not null
  ORDER BY date_added desc 
  LIMIT 1";

#		echo "sql = '<pre>$sql</pre>'<BR>";

		$result = pg_exec($this->dbh, $sql);
		if ($result) {
			$numrows = pg_numrows($result);
			if ($numrows == 1) {
				if ($Debug) echo "fetched by ID succeeded<BR>";
				$myrow = pg_fetch_array ($result, 0);
				$this->PopulateValues($myrow);
			}
		}

		return $this->message_id;
	}

	function EncodingLosses() {
		return $this->encoding_losses == 't';
	}

}
