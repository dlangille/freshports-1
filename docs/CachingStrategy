We need a better way to cache port data.

At present, we cache only the commit history.  We should also cache the
other port data, which we will call the port details.

###
If you add a port to your watch list, that port must be flushed from the
cache because the watch-list count has changed.
###

We display user-specific information within the port details.  Specifically,
we display the watch list add and remove icons.  Clearly we need a way to
include the correct icon for a specific user when we pull data from the
cache.

I suggest we insert a token into the cached information and use the str_replace
PHP function to convert the token to the HTML appropriate to the user in
question. Sometimes, this HTML will be an empty string (i.e. the user is not
logged in).

We also want to insert the current date time into the cached data before
display.

The port data can be broken up into distinct portions within the cache, then
reassembled for display.  For example, we have:

Port Details - name, category, restricted, etc
Links - to cvsweb, sources, home page
Slave Ports
required libaries
To install the port
To add the package
master sites
long description
Notes from updating
Port Moves
Commit History

NOTE: We should move the long description up under port added.  Looks much
better.

We also want to be able to insert an advertisment into the port page,
somewhere.

Ports with a very long commit history may require pagination.  For example,
security/vuxml.  <== nice to have.  won't do in short term.

For now, we will not cache the page headers and footer.  Perhaps later.

In all of this, we want to start using classes/port-display.php and start
deprecating include/freshports.php::freshports_DisplayPort().  This appears
to be have based upon freshports_DisplayPort() and will most likely
refreshing before use.  It also looks to be partially completed.

When parsing a URL, we need to determine what we are working with first. 
That is, category, port, or other.  We need to do this without accessing the
database and by checking the cache first.  If a cache entry is found, use
it. If not, create the cache entry.


split URL into $category, $port, and $extra.
if ($category only) {
  # go to category processing
} else {
  if ($port only) {
     # goto part processing
  } else {
     # goto special processing
  }
}

All those pages within the FreshPorts page class can be cached, using a
ancestor script.  There must also be a way to remove entries from those
classes should a commmit occur.

Similary, we need a list of pages that should expire when a new port is
committed.  If we can determine that a new port has been added...

Also, the list of deleted ports is very static.
